// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.1
// source: pkg/protocol/pb/message.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MessageType 消息类型枚举
type MessageType int32

const (
	MessageType_REQUEST      MessageType = 0
	MessageType_RESPONSE     MessageType = 1
	MessageType_NOTIFICATION MessageType = 2
	MessageType_ERROR        MessageType = 3
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "REQUEST",
		1: "RESPONSE",
		2: "NOTIFICATION",
		3: "ERROR",
	}
	MessageType_value = map[string]int32{
		"REQUEST":      0,
		"RESPONSE":     1,
		"NOTIFICATION": 2,
		"ERROR":        3,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_protocol_pb_message_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_pkg_protocol_pb_message_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{0}
}

// ActionType 动作类型枚举
type ActionType int32

const (
	// 订阅管理
	ActionType_SUBSCRIBE   ActionType = 0
	ActionType_UNSUBSCRIBE ActionType = 1
	// 数据获取
	ActionType_FETCH_MARKETS   ActionType = 10
	ActionType_FETCH_TICKER    ActionType = 11
	ActionType_FETCH_TICKERS   ActionType = 12
	ActionType_FETCH_KLINES    ActionType = 13
	ActionType_FETCH_TRADES    ActionType = 14
	ActionType_FETCH_ORDERBOOK ActionType = 15
	// 数据推送
	ActionType_MARKET_UPDATE    ActionType = 20
	ActionType_PRICE_UPDATE     ActionType = 21 // 轻量级价格更新
	ActionType_KLINE_UPDATE     ActionType = 22
	ActionType_TRADE_UPDATE     ActionType = 23
	ActionType_ORDERBOOK_UPDATE ActionType = 24
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0:  "SUBSCRIBE",
		1:  "UNSUBSCRIBE",
		10: "FETCH_MARKETS",
		11: "FETCH_TICKER",
		12: "FETCH_TICKERS",
		13: "FETCH_KLINES",
		14: "FETCH_TRADES",
		15: "FETCH_ORDERBOOK",
		20: "MARKET_UPDATE",
		21: "PRICE_UPDATE",
		22: "KLINE_UPDATE",
		23: "TRADE_UPDATE",
		24: "ORDERBOOK_UPDATE",
	}
	ActionType_value = map[string]int32{
		"SUBSCRIBE":        0,
		"UNSUBSCRIBE":      1,
		"FETCH_MARKETS":    10,
		"FETCH_TICKER":     11,
		"FETCH_TICKERS":    12,
		"FETCH_KLINES":     13,
		"FETCH_TRADES":     14,
		"FETCH_ORDERBOOK":  15,
		"MARKET_UPDATE":    20,
		"PRICE_UPDATE":     21,
		"KLINE_UPDATE":     22,
		"TRADE_UPDATE":     23,
		"ORDERBOOK_UPDATE": 24,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_protocol_pb_message_proto_enumTypes[1].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_pkg_protocol_pb_message_proto_enumTypes[1]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{1}
}

// DataType 数据类型枚举
type DataType int32

const (
	DataType_PRICE     DataType = 0 // 轻量级价格数据
	DataType_KLINE     DataType = 1 // K线数据
	DataType_TRADE     DataType = 2 // 交易数据
	DataType_ORDERBOOK DataType = 3 // 订单簿数据
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0: "PRICE",
		1: "KLINE",
		2: "TRADE",
		3: "ORDERBOOK",
	}
	DataType_value = map[string]int32{
		"PRICE":     0,
		"KLINE":     1,
		"TRADE":     2,
		"ORDERBOOK": 3,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_protocol_pb_message_proto_enumTypes[2].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_pkg_protocol_pb_message_proto_enumTypes[2]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{2}
}

// Message 通用消息包装器
type Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                             // 消息ID
	Action        ActionType             `protobuf:"varint,2,opt,name=action,proto3,enum=pb.ActionType" json:"action,omitempty"` // 动作类型
	Type          MessageType            `protobuf:"varint,3,opt,name=type,proto3,enum=pb.MessageType" json:"type,omitempty"`    // 消息类型
	Data          []byte                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                         // 消息载荷
	Timestamp     int64                  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`              // 时间戳
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Message) GetAction() ActionType {
	if x != nil {
		return x.Action
	}
	return ActionType_SUBSCRIBE
}

func (x *Message) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_REQUEST
}

func (x *Message) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Message) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Error 错误信息
type Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Details       string                 `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{1}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

// Market 市场信息
type Market struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Id     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`         // 交易所内部ID
	Symbol string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"` // 标准化交易对符号
	Base   string                 `protobuf:"bytes,3,opt,name=base,proto3" json:"base,omitempty"`     // 基础货币
	Quote  string                 `protobuf:"bytes,4,opt,name=quote,proto3" json:"quote,omitempty"`   // 计价货币
	Settle string                 `protobuf:"bytes,5,opt,name=settle,proto3" json:"settle,omitempty"` // 结算货币 (期货合约)
	Type   string                 `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`     // 市场类型: spot, swap, future, option
	// 市场类型标识
	Spot     bool `protobuf:"varint,7,opt,name=spot,proto3" json:"spot,omitempty"`          // 是否现货
	Margin   bool `protobuf:"varint,8,opt,name=margin,proto3" json:"margin,omitempty"`      // 是否支持保证金
	Swap     bool `protobuf:"varint,9,opt,name=swap,proto3" json:"swap,omitempty"`          // 是否永续合约
	Future   bool `protobuf:"varint,10,opt,name=future,proto3" json:"future,omitempty"`     // 是否期货
	Option   bool `protobuf:"varint,11,opt,name=option,proto3" json:"option,omitempty"`     // 是否期权
	Active   bool `protobuf:"varint,12,opt,name=active,proto3" json:"active,omitempty"`     // 是否活跃
	Contract bool `protobuf:"varint,13,opt,name=contract,proto3" json:"contract,omitempty"` // 是否合约
	Linear   bool `protobuf:"varint,14,opt,name=linear,proto3" json:"linear,omitempty"`     // 是否线性合约
	Inverse  bool `protobuf:"varint,15,opt,name=inverse,proto3" json:"inverse,omitempty"`   // 是否反向合约
	// 费率信息
	MakerFee float64 `protobuf:"fixed64,16,opt,name=maker_fee,json=makerFee,proto3" json:"maker_fee,omitempty"` // 做市商手续费率
	TakerFee float64 `protobuf:"fixed64,17,opt,name=taker_fee,json=takerFee,proto3" json:"taker_fee,omitempty"` // 吃单手续费率
	// 合约相关信息
	ContractSize   float64 `protobuf:"fixed64,18,opt,name=contract_size,json=contractSize,proto3" json:"contract_size,omitempty"`     // 合约大小
	Expiry         int64   `protobuf:"varint,19,opt,name=expiry,proto3" json:"expiry,omitempty"`                                      // 到期时间戳 (期货)
	ExpiryDatetime string  `protobuf:"bytes,20,opt,name=expiry_datetime,json=expiryDatetime,proto3" json:"expiry_datetime,omitempty"` // 到期时间 ISO8601 格式
	Strike         float64 `protobuf:"fixed64,21,opt,name=strike,proto3" json:"strike,omitempty"`                                     // 行权价 (期权)
	OptionType     string  `protobuf:"bytes,22,opt,name=option_type,json=optionType,proto3" json:"option_type,omitempty"`             // call/put (期权)
	// 精度信息
	Precision *MarketPrecision `protobuf:"bytes,23,opt,name=precision,proto3" json:"precision,omitempty"`
	// 限制信息
	Limits *MarketLimits `protobuf:"bytes,24,opt,name=limits,proto3" json:"limits,omitempty"`
	// 原始信息 (JSON格式字符串)
	Info          string `protobuf:"bytes,25,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Market) Reset() {
	*x = Market{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Market) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Market) ProtoMessage() {}

func (x *Market) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Market.ProtoReflect.Descriptor instead.
func (*Market) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{2}
}

func (x *Market) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Market) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Market) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *Market) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *Market) GetSettle() string {
	if x != nil {
		return x.Settle
	}
	return ""
}

func (x *Market) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Market) GetSpot() bool {
	if x != nil {
		return x.Spot
	}
	return false
}

func (x *Market) GetMargin() bool {
	if x != nil {
		return x.Margin
	}
	return false
}

func (x *Market) GetSwap() bool {
	if x != nil {
		return x.Swap
	}
	return false
}

func (x *Market) GetFuture() bool {
	if x != nil {
		return x.Future
	}
	return false
}

func (x *Market) GetOption() bool {
	if x != nil {
		return x.Option
	}
	return false
}

func (x *Market) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Market) GetContract() bool {
	if x != nil {
		return x.Contract
	}
	return false
}

func (x *Market) GetLinear() bool {
	if x != nil {
		return x.Linear
	}
	return false
}

func (x *Market) GetInverse() bool {
	if x != nil {
		return x.Inverse
	}
	return false
}

func (x *Market) GetMakerFee() float64 {
	if x != nil {
		return x.MakerFee
	}
	return 0
}

func (x *Market) GetTakerFee() float64 {
	if x != nil {
		return x.TakerFee
	}
	return 0
}

func (x *Market) GetContractSize() float64 {
	if x != nil {
		return x.ContractSize
	}
	return 0
}

func (x *Market) GetExpiry() int64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *Market) GetExpiryDatetime() string {
	if x != nil {
		return x.ExpiryDatetime
	}
	return ""
}

func (x *Market) GetStrike() float64 {
	if x != nil {
		return x.Strike
	}
	return 0
}

func (x *Market) GetOptionType() string {
	if x != nil {
		return x.OptionType
	}
	return ""
}

func (x *Market) GetPrecision() *MarketPrecision {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *Market) GetLimits() *MarketLimits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *Market) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

// MarketPrecision 市场精度信息
type MarketPrecision struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Amount        float64                `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"` // 数量精度
	Price         float64                `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`   // 价格精度
	Cost          float64                `protobuf:"fixed64,3,opt,name=cost,proto3" json:"cost,omitempty"`     // 成本精度
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketPrecision) Reset() {
	*x = MarketPrecision{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketPrecision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketPrecision) ProtoMessage() {}

func (x *MarketPrecision) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketPrecision.ProtoReflect.Descriptor instead.
func (*MarketPrecision) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{3}
}

func (x *MarketPrecision) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MarketPrecision) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketPrecision) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

// MarketLimits 市场限制信息
type MarketLimits struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Leverage      *LimitRange            `protobuf:"bytes,1,opt,name=leverage,proto3" json:"leverage,omitempty"` // 杠杆范围
	Amount        *LimitRange            `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`     // 数量范围
	Price         *LimitRange            `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`       // 价格范围
	Cost          *LimitRange            `protobuf:"bytes,4,opt,name=cost,proto3" json:"cost,omitempty"`         // 成本范围
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketLimits) Reset() {
	*x = MarketLimits{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketLimits) ProtoMessage() {}

func (x *MarketLimits) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketLimits.ProtoReflect.Descriptor instead.
func (*MarketLimits) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{4}
}

func (x *MarketLimits) GetLeverage() *LimitRange {
	if x != nil {
		return x.Leverage
	}
	return nil
}

func (x *MarketLimits) GetAmount() *LimitRange {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *MarketLimits) GetPrice() *LimitRange {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *MarketLimits) GetCost() *LimitRange {
	if x != nil {
		return x.Cost
	}
	return nil
}

// LimitRange 范围限制
type LimitRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Min           float64                `protobuf:"fixed64,1,opt,name=min,proto3" json:"min,omitempty"` // 最小值
	Max           float64                `protobuf:"fixed64,2,opt,name=max,proto3" json:"max,omitempty"` // 最大值
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LimitRange) Reset() {
	*x = LimitRange{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LimitRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitRange) ProtoMessage() {}

func (x *LimitRange) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitRange.ProtoReflect.Descriptor instead.
func (*LimitRange) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{5}
}

func (x *LimitRange) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *LimitRange) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

// Ticker 行情数据
type Ticker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbol        string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`                                       // 交易对符号
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                // 时间戳
	Last          float64                `protobuf:"fixed64,3,opt,name=last,proto3" json:"last,omitempty"`                                         // 最新价
	Bid           float64                `protobuf:"fixed64,4,opt,name=bid,proto3" json:"bid,omitempty"`                                           // 买一价
	Ask           float64                `protobuf:"fixed64,5,opt,name=ask,proto3" json:"ask,omitempty"`                                           // 卖一价
	High          float64                `protobuf:"fixed64,6,opt,name=high,proto3" json:"high,omitempty"`                                         // 24h最高价
	Low           float64                `protobuf:"fixed64,7,opt,name=low,proto3" json:"low,omitempty"`                                           // 24h最低价
	Open          float64                `protobuf:"fixed64,8,opt,name=open,proto3" json:"open,omitempty"`                                         // 开盘价
	Close         float64                `protobuf:"fixed64,9,opt,name=close,proto3" json:"close,omitempty"`                                       // 收盘价
	Volume        float64                `protobuf:"fixed64,10,opt,name=volume,proto3" json:"volume,omitempty"`                                    // 24h成交量
	Change        float64                `protobuf:"fixed64,11,opt,name=change,proto3" json:"change,omitempty"`                                    // 价格变化
	ChangePercent float64                `protobuf:"fixed64,12,opt,name=change_percent,json=changePercent,proto3" json:"change_percent,omitempty"` // 变化百分比
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ticker) Reset() {
	*x = Ticker{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticker) ProtoMessage() {}

func (x *Ticker) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticker.ProtoReflect.Descriptor instead.
func (*Ticker) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{6}
}

func (x *Ticker) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Ticker) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Ticker) GetLast() float64 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *Ticker) GetBid() float64 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *Ticker) GetAsk() float64 {
	if x != nil {
		return x.Ask
	}
	return 0
}

func (x *Ticker) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Ticker) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Ticker) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Ticker) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *Ticker) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Ticker) GetChange() float64 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *Ticker) GetChangePercent() float64 {
	if x != nil {
		return x.ChangePercent
	}
	return 0
}

// Kline K线数据
type Kline struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbol        string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`                      // 交易对符号
	Exchange      string                 `protobuf:"bytes,2,opt,name=exchange,proto3" json:"exchange,omitempty"`                  // 交易所名称
	Timeframe     string                 `protobuf:"bytes,3,opt,name=timeframe,proto3" json:"timeframe,omitempty"`                // 时间周期
	OpenTime      int64                  `protobuf:"varint,4,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"` // 开盘时间
	Open          float64                `protobuf:"fixed64,5,opt,name=open,proto3" json:"open,omitempty"`                        // 开盘价
	High          float64                `protobuf:"fixed64,6,opt,name=high,proto3" json:"high,omitempty"`                        // 最高价
	Low           float64                `protobuf:"fixed64,7,opt,name=low,proto3" json:"low,omitempty"`                          // 最低价
	Close         float64                `protobuf:"fixed64,8,opt,name=close,proto3" json:"close,omitempty"`                      // 收盘价
	Volume        float64                `protobuf:"fixed64,9,opt,name=volume,proto3" json:"volume,omitempty"`                    // 成交量
	Closed        bool                   `protobuf:"varint,10,opt,name=closed,proto3" json:"closed,omitempty"`                    // 是否已收盘
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Kline) Reset() {
	*x = Kline{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Kline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kline) ProtoMessage() {}

func (x *Kline) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kline.ProtoReflect.Descriptor instead.
func (*Kline) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{7}
}

func (x *Kline) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Kline) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Kline) GetTimeframe() string {
	if x != nil {
		return x.Timeframe
	}
	return ""
}

func (x *Kline) GetOpenTime() int64 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *Kline) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Kline) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Kline) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Kline) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *Kline) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Kline) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

// Trade 交易记录
type Trade struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                // 交易ID
	Symbol        string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`        // 交易对符号
	Exchange      string                 `protobuf:"bytes,3,opt,name=exchange,proto3" json:"exchange,omitempty"`    // 交易所名称
	Price         float64                `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`        // 成交价格
	Quantity      float64                `protobuf:"fixed64,5,opt,name=quantity,proto3" json:"quantity,omitempty"`  // 成交数量
	Side          string                 `protobuf:"bytes,6,opt,name=side,proto3" json:"side,omitempty"`            // 买卖方向: buy/sell
	Timestamp     int64                  `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 成交时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Trade) Reset() {
	*x = Trade{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{8}
}

func (x *Trade) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Trade) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Trade) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Trade) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Trade) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Trade) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *Trade) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// OrderBook 订单簿
type OrderBook struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbol        string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`        // 交易对符号
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 时间戳
	Bids          []*PriceLevel          `protobuf:"bytes,3,rep,name=bids,proto3" json:"bids,omitempty"`            // 买单
	Asks          []*PriceLevel          `protobuf:"bytes,4,rep,name=asks,proto3" json:"asks,omitempty"`            // 卖单
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBook) Reset() {
	*x = OrderBook{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBook) ProtoMessage() {}

func (x *OrderBook) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBook.ProtoReflect.Descriptor instead.
func (*OrderBook) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{9}
}

func (x *OrderBook) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *OrderBook) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *OrderBook) GetBids() []*PriceLevel {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *OrderBook) GetAsks() []*PriceLevel {
	if x != nil {
		return x.Asks
	}
	return nil
}

// PriceLevel 价格档位
type PriceLevel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Price         float64                `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`       // 价格
	Quantity      float64                `protobuf:"fixed64,2,opt,name=quantity,proto3" json:"quantity,omitempty"` // 数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceLevel) Reset() {
	*x = PriceLevel{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceLevel) ProtoMessage() {}

func (x *PriceLevel) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceLevel.ProtoReflect.Descriptor instead.
func (*PriceLevel) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{10}
}

func (x *PriceLevel) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PriceLevel) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// SubscribeRequest 订阅请求
type SubscribeRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Exchange   string                 `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`                                   // 交易所名称
	MarketType string                 `protobuf:"bytes,2,opt,name=market_type,json=marketType,proto3" json:"market_type,omitempty"`             // 市场类型: spot, futures, swap
	Symbol     string                 `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`                                       // 单个交易对
	DataType   DataType               `protobuf:"varint,4,opt,name=data_type,json=dataType,proto3,enum=pb.DataType" json:"data_type,omitempty"` // 数据类型
	// 可选参数
	KlineInterval  string `protobuf:"bytes,5,opt,name=kline_interval,json=klineInterval,proto3" json:"kline_interval,omitempty"`     // K线间隔: 1m, 5m, 1h等 (仅当data_type=KLINE时有效)
	OrderbookDepth int32  `protobuf:"varint,6,opt,name=orderbook_depth,json=orderbookDepth,proto3" json:"orderbook_depth,omitempty"` // 订单簿深度 (仅当data_type=ORDERBOOK时有效)
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{11}
}

func (x *SubscribeRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *SubscribeRequest) GetMarketType() string {
	if x != nil {
		return x.MarketType
	}
	return ""
}

func (x *SubscribeRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SubscribeRequest) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_PRICE
}

func (x *SubscribeRequest) GetKlineInterval() string {
	if x != nil {
		return x.KlineInterval
	}
	return ""
}

func (x *SubscribeRequest) GetOrderbookDepth() int32 {
	if x != nil {
		return x.OrderbookDepth
	}
	return 0
}

// SubscribeResponse 订阅响应
type SubscribeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Topic         string                 `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"` // 订阅topic，用于后续取消订阅
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{12}
}

func (x *SubscribeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SubscribeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SubscribeResponse) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

// UnsubscribeRequest 取消订阅请求
type UnsubscribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topic         string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnsubscribeRequest) Reset() {
	*x = UnsubscribeRequest{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeRequest) ProtoMessage() {}

func (x *UnsubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeRequest.ProtoReflect.Descriptor instead.
func (*UnsubscribeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{13}
}

func (x *UnsubscribeRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

// UnsubscribeResponse 取消订阅响应
type UnsubscribeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnsubscribeResponse) Reset() {
	*x = UnsubscribeResponse{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeResponse) ProtoMessage() {}

func (x *UnsubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeResponse.ProtoReflect.Descriptor instead.
func (*UnsubscribeResponse) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{14}
}

func (x *UnsubscribeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UnsubscribeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// FetchMarketsRequest 获取市场信息请求
type FetchMarketsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exchange      string                 `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	MarketType    string                 `protobuf:"bytes,2,opt,name=market_type,json=marketType,proto3" json:"market_type,omitempty"` // 过滤市场类型
	StackType     string                 `protobuf:"bytes,3,opt,name=stack_type,json=stackType,proto3" json:"stack_type,omitempty"`    // 质押物类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchMarketsRequest) Reset() {
	*x = FetchMarketsRequest{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchMarketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMarketsRequest) ProtoMessage() {}

func (x *FetchMarketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMarketsRequest.ProtoReflect.Descriptor instead.
func (*FetchMarketsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{15}
}

func (x *FetchMarketsRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *FetchMarketsRequest) GetMarketType() string {
	if x != nil {
		return x.MarketType
	}
	return ""
}

func (x *FetchMarketsRequest) GetStackType() string {
	if x != nil {
		return x.StackType
	}
	return ""
}

// FetchMarketsResponse 获取市场信息响应
type FetchMarketsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Markets       []*Market              `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchMarketsResponse) Reset() {
	*x = FetchMarketsResponse{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchMarketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMarketsResponse) ProtoMessage() {}

func (x *FetchMarketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMarketsResponse.ProtoReflect.Descriptor instead.
func (*FetchMarketsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{16}
}

func (x *FetchMarketsResponse) GetMarkets() []*Market {
	if x != nil {
		return x.Markets
	}
	return nil
}

// FetchTickerRequest 获取行情请求
type FetchTickerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exchange      string                 `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol        string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	MarketType    string                 `protobuf:"bytes,3,opt,name=market_type,json=marketType,proto3" json:"market_type,omitempty"` // 市场类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchTickerRequest) Reset() {
	*x = FetchTickerRequest{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchTickerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchTickerRequest) ProtoMessage() {}

func (x *FetchTickerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchTickerRequest.ProtoReflect.Descriptor instead.
func (*FetchTickerRequest) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{17}
}

func (x *FetchTickerRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *FetchTickerRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *FetchTickerRequest) GetMarketType() string {
	if x != nil {
		return x.MarketType
	}
	return ""
}

// FetchTickerResponse 获取行情响应
type FetchTickerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ticker        *Ticker                `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchTickerResponse) Reset() {
	*x = FetchTickerResponse{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchTickerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchTickerResponse) ProtoMessage() {}

func (x *FetchTickerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchTickerResponse.ProtoReflect.Descriptor instead.
func (*FetchTickerResponse) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{18}
}

func (x *FetchTickerResponse) GetTicker() *Ticker {
	if x != nil {
		return x.Ticker
	}
	return nil
}

// FetchTickersRequest 获取单个行情请求
type FetchTickersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exchange      string                 `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol        string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	MarketType    string                 `protobuf:"bytes,3,opt,name=market_type,json=marketType,proto3" json:"market_type,omitempty"` // 市场类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchTickersRequest) Reset() {
	*x = FetchTickersRequest{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchTickersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchTickersRequest) ProtoMessage() {}

func (x *FetchTickersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchTickersRequest.ProtoReflect.Descriptor instead.
func (*FetchTickersRequest) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{19}
}

func (x *FetchTickersRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *FetchTickersRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *FetchTickersRequest) GetMarketType() string {
	if x != nil {
		return x.MarketType
	}
	return ""
}

// FetchTickersResponse 获取单个行情响应
type FetchTickersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ticker        *Ticker                `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchTickersResponse) Reset() {
	*x = FetchTickersResponse{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchTickersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchTickersResponse) ProtoMessage() {}

func (x *FetchTickersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchTickersResponse.ProtoReflect.Descriptor instead.
func (*FetchTickersResponse) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{20}
}

func (x *FetchTickersResponse) GetTicker() *Ticker {
	if x != nil {
		return x.Ticker
	}
	return nil
}

// FetchKlinesRequest 获取K线请求
type FetchKlinesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exchange      string                 `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol        string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Interval      string                 `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty"`
	StartTime     int64                  `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int64                  `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Limit         int32                  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	MarketType    string                 `protobuf:"bytes,7,opt,name=market_type,json=marketType,proto3" json:"market_type,omitempty"` // 市场类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchKlinesRequest) Reset() {
	*x = FetchKlinesRequest{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchKlinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchKlinesRequest) ProtoMessage() {}

func (x *FetchKlinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchKlinesRequest.ProtoReflect.Descriptor instead.
func (*FetchKlinesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{21}
}

func (x *FetchKlinesRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *FetchKlinesRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *FetchKlinesRequest) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *FetchKlinesRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FetchKlinesRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *FetchKlinesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FetchKlinesRequest) GetMarketType() string {
	if x != nil {
		return x.MarketType
	}
	return ""
}

// FetchKlinesResponse 获取K线响应
type FetchKlinesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Klines        []*Kline               `protobuf:"bytes,1,rep,name=klines,proto3" json:"klines,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchKlinesResponse) Reset() {
	*x = FetchKlinesResponse{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchKlinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchKlinesResponse) ProtoMessage() {}

func (x *FetchKlinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchKlinesResponse.ProtoReflect.Descriptor instead.
func (*FetchKlinesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{22}
}

func (x *FetchKlinesResponse) GetKlines() []*Kline {
	if x != nil {
		return x.Klines
	}
	return nil
}

// FetchTradesRequest 获取交易记录请求
type FetchTradesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exchange      string                 `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol        string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Since         int64                  `protobuf:"varint,3,opt,name=since,proto3" json:"since,omitempty"`
	Limit         int32                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	MarketType    string                 `protobuf:"bytes,5,opt,name=market_type,json=marketType,proto3" json:"market_type,omitempty"` // 市场类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchTradesRequest) Reset() {
	*x = FetchTradesRequest{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchTradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchTradesRequest) ProtoMessage() {}

func (x *FetchTradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchTradesRequest.ProtoReflect.Descriptor instead.
func (*FetchTradesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{23}
}

func (x *FetchTradesRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *FetchTradesRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *FetchTradesRequest) GetSince() int64 {
	if x != nil {
		return x.Since
	}
	return 0
}

func (x *FetchTradesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FetchTradesRequest) GetMarketType() string {
	if x != nil {
		return x.MarketType
	}
	return ""
}

// FetchTradesResponse 获取交易记录响应
type FetchTradesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trades        []*Trade               `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchTradesResponse) Reset() {
	*x = FetchTradesResponse{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchTradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchTradesResponse) ProtoMessage() {}

func (x *FetchTradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchTradesResponse.ProtoReflect.Descriptor instead.
func (*FetchTradesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{24}
}

func (x *FetchTradesResponse) GetTrades() []*Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

// FetchOrderBookRequest 获取订单簿请求
type FetchOrderBookRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exchange      string                 `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol        string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	MarketType    string                 `protobuf:"bytes,4,opt,name=market_type,json=marketType,proto3" json:"market_type,omitempty"` // 市场类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchOrderBookRequest) Reset() {
	*x = FetchOrderBookRequest{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchOrderBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchOrderBookRequest) ProtoMessage() {}

func (x *FetchOrderBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchOrderBookRequest.ProtoReflect.Descriptor instead.
func (*FetchOrderBookRequest) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{25}
}

func (x *FetchOrderBookRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *FetchOrderBookRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *FetchOrderBookRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FetchOrderBookRequest) GetMarketType() string {
	if x != nil {
		return x.MarketType
	}
	return ""
}

// FetchOrderBookResponse 获取订单簿响应
type FetchOrderBookResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Orderbook     *OrderBook             `protobuf:"bytes,1,opt,name=orderbook,proto3" json:"orderbook,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchOrderBookResponse) Reset() {
	*x = FetchOrderBookResponse{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchOrderBookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchOrderBookResponse) ProtoMessage() {}

func (x *FetchOrderBookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchOrderBookResponse.ProtoReflect.Descriptor instead.
func (*FetchOrderBookResponse) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{26}
}

func (x *FetchOrderBookResponse) GetOrderbook() *OrderBook {
	if x != nil {
		return x.Orderbook
	}
	return nil
}

// PriceUpdate 轻量级价格更新推送
type PriceUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topic         string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`          // 订阅topic作为唯一标识
	Symbol        string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`        // 交易对符号
	Price         float64                `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`        // 价格
	Timestamp     int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 时间戳
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceUpdate) Reset() {
	*x = PriceUpdate{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceUpdate) ProtoMessage() {}

func (x *PriceUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceUpdate.ProtoReflect.Descriptor instead.
func (*PriceUpdate) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{27}
}

func (x *PriceUpdate) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PriceUpdate) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *PriceUpdate) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PriceUpdate) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// KlineUpdate K线更新推送
type KlineUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topic         string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"` // 订阅topic作为唯一标识
	Kline         *Kline                 `protobuf:"bytes,2,opt,name=kline,proto3" json:"kline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KlineUpdate) Reset() {
	*x = KlineUpdate{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KlineUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KlineUpdate) ProtoMessage() {}

func (x *KlineUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KlineUpdate.ProtoReflect.Descriptor instead.
func (*KlineUpdate) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{28}
}

func (x *KlineUpdate) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *KlineUpdate) GetKline() *Kline {
	if x != nil {
		return x.Kline
	}
	return nil
}

// TradeUpdate 交易更新推送
type TradeUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topic         string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"` // 订阅topic作为唯一标识
	Trade         *Trade                 `protobuf:"bytes,2,opt,name=trade,proto3" json:"trade,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradeUpdate) Reset() {
	*x = TradeUpdate{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeUpdate) ProtoMessage() {}

func (x *TradeUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeUpdate.ProtoReflect.Descriptor instead.
func (*TradeUpdate) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{29}
}

func (x *TradeUpdate) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *TradeUpdate) GetTrade() *Trade {
	if x != nil {
		return x.Trade
	}
	return nil
}

// OrderBookUpdate 订单簿更新推送
type OrderBookUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topic         string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"` // 订阅topic作为唯一标识
	Orderbook     *OrderBook             `protobuf:"bytes,2,opt,name=orderbook,proto3" json:"orderbook,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBookUpdate) Reset() {
	*x = OrderBookUpdate{}
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBookUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookUpdate) ProtoMessage() {}

func (x *OrderBookUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_protocol_pb_message_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookUpdate.ProtoReflect.Descriptor instead.
func (*OrderBookUpdate) Descriptor() ([]byte, []int) {
	return file_pkg_protocol_pb_message_proto_rawDescGZIP(), []int{30}
}

func (x *OrderBookUpdate) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *OrderBookUpdate) GetOrderbook() *OrderBook {
	if x != nil {
		return x.Orderbook
	}
	return nil
}

var File_pkg_protocol_pb_message_proto protoreflect.FileDescriptor

const file_pkg_protocol_pb_message_proto_rawDesc = "" +
	"\n" +
	"\x1dpkg/protocol/pb/message.proto\x12\x02pb\"\x98\x01\n" +
	"\aMessage\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12&\n" +
	"\x06action\x18\x02 \x01(\x0e2\x0e.pb.ActionTypeR\x06action\x12#\n" +
	"\x04type\x18\x03 \x01(\x0e2\x0f.pb.MessageTypeR\x04type\x12\x12\n" +
	"\x04data\x18\x04 \x01(\fR\x04data\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\x03R\ttimestamp\"O\n" +
	"\x05Error\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x18\n" +
	"\adetails\x18\x03 \x01(\tR\adetails\"\xa6\x05\n" +
	"\x06Market\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x16\n" +
	"\x06symbol\x18\x02 \x01(\tR\x06symbol\x12\x12\n" +
	"\x04base\x18\x03 \x01(\tR\x04base\x12\x14\n" +
	"\x05quote\x18\x04 \x01(\tR\x05quote\x12\x16\n" +
	"\x06settle\x18\x05 \x01(\tR\x06settle\x12\x12\n" +
	"\x04type\x18\x06 \x01(\tR\x04type\x12\x12\n" +
	"\x04spot\x18\a \x01(\bR\x04spot\x12\x16\n" +
	"\x06margin\x18\b \x01(\bR\x06margin\x12\x12\n" +
	"\x04swap\x18\t \x01(\bR\x04swap\x12\x16\n" +
	"\x06future\x18\n" +
	" \x01(\bR\x06future\x12\x16\n" +
	"\x06option\x18\v \x01(\bR\x06option\x12\x16\n" +
	"\x06active\x18\f \x01(\bR\x06active\x12\x1a\n" +
	"\bcontract\x18\r \x01(\bR\bcontract\x12\x16\n" +
	"\x06linear\x18\x0e \x01(\bR\x06linear\x12\x18\n" +
	"\ainverse\x18\x0f \x01(\bR\ainverse\x12\x1b\n" +
	"\tmaker_fee\x18\x10 \x01(\x01R\bmakerFee\x12\x1b\n" +
	"\ttaker_fee\x18\x11 \x01(\x01R\btakerFee\x12#\n" +
	"\rcontract_size\x18\x12 \x01(\x01R\fcontractSize\x12\x16\n" +
	"\x06expiry\x18\x13 \x01(\x03R\x06expiry\x12'\n" +
	"\x0fexpiry_datetime\x18\x14 \x01(\tR\x0eexpiryDatetime\x12\x16\n" +
	"\x06strike\x18\x15 \x01(\x01R\x06strike\x12\x1f\n" +
	"\voption_type\x18\x16 \x01(\tR\n" +
	"optionType\x121\n" +
	"\tprecision\x18\x17 \x01(\v2\x13.pb.MarketPrecisionR\tprecision\x12(\n" +
	"\x06limits\x18\x18 \x01(\v2\x10.pb.MarketLimitsR\x06limits\x12\x12\n" +
	"\x04info\x18\x19 \x01(\tR\x04info\"S\n" +
	"\x0fMarketPrecision\x12\x16\n" +
	"\x06amount\x18\x01 \x01(\x01R\x06amount\x12\x14\n" +
	"\x05price\x18\x02 \x01(\x01R\x05price\x12\x12\n" +
	"\x04cost\x18\x03 \x01(\x01R\x04cost\"\xac\x01\n" +
	"\fMarketLimits\x12*\n" +
	"\bleverage\x18\x01 \x01(\v2\x0e.pb.LimitRangeR\bleverage\x12&\n" +
	"\x06amount\x18\x02 \x01(\v2\x0e.pb.LimitRangeR\x06amount\x12$\n" +
	"\x05price\x18\x03 \x01(\v2\x0e.pb.LimitRangeR\x05price\x12\"\n" +
	"\x04cost\x18\x04 \x01(\v2\x0e.pb.LimitRangeR\x04cost\"0\n" +
	"\n" +
	"LimitRange\x12\x10\n" +
	"\x03min\x18\x01 \x01(\x01R\x03min\x12\x10\n" +
	"\x03max\x18\x02 \x01(\x01R\x03max\"\x9d\x02\n" +
	"\x06Ticker\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\x12\x12\n" +
	"\x04last\x18\x03 \x01(\x01R\x04last\x12\x10\n" +
	"\x03bid\x18\x04 \x01(\x01R\x03bid\x12\x10\n" +
	"\x03ask\x18\x05 \x01(\x01R\x03ask\x12\x12\n" +
	"\x04high\x18\x06 \x01(\x01R\x04high\x12\x10\n" +
	"\x03low\x18\a \x01(\x01R\x03low\x12\x12\n" +
	"\x04open\x18\b \x01(\x01R\x04open\x12\x14\n" +
	"\x05close\x18\t \x01(\x01R\x05close\x12\x16\n" +
	"\x06volume\x18\n" +
	" \x01(\x01R\x06volume\x12\x16\n" +
	"\x06change\x18\v \x01(\x01R\x06change\x12%\n" +
	"\x0echange_percent\x18\f \x01(\x01R\rchangePercent\"\xf6\x01\n" +
	"\x05Kline\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12\x1a\n" +
	"\bexchange\x18\x02 \x01(\tR\bexchange\x12\x1c\n" +
	"\ttimeframe\x18\x03 \x01(\tR\ttimeframe\x12\x1b\n" +
	"\topen_time\x18\x04 \x01(\x03R\bopenTime\x12\x12\n" +
	"\x04open\x18\x05 \x01(\x01R\x04open\x12\x12\n" +
	"\x04high\x18\x06 \x01(\x01R\x04high\x12\x10\n" +
	"\x03low\x18\a \x01(\x01R\x03low\x12\x14\n" +
	"\x05close\x18\b \x01(\x01R\x05close\x12\x16\n" +
	"\x06volume\x18\t \x01(\x01R\x06volume\x12\x16\n" +
	"\x06closed\x18\n" +
	" \x01(\bR\x06closed\"\xaf\x01\n" +
	"\x05Trade\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x16\n" +
	"\x06symbol\x18\x02 \x01(\tR\x06symbol\x12\x1a\n" +
	"\bexchange\x18\x03 \x01(\tR\bexchange\x12\x14\n" +
	"\x05price\x18\x04 \x01(\x01R\x05price\x12\x1a\n" +
	"\bquantity\x18\x05 \x01(\x01R\bquantity\x12\x12\n" +
	"\x04side\x18\x06 \x01(\tR\x04side\x12\x1c\n" +
	"\ttimestamp\x18\a \x01(\x03R\ttimestamp\"\x89\x01\n" +
	"\tOrderBook\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\x12\"\n" +
	"\x04bids\x18\x03 \x03(\v2\x0e.pb.PriceLevelR\x04bids\x12\"\n" +
	"\x04asks\x18\x04 \x03(\v2\x0e.pb.PriceLevelR\x04asks\">\n" +
	"\n" +
	"PriceLevel\x12\x14\n" +
	"\x05price\x18\x01 \x01(\x01R\x05price\x12\x1a\n" +
	"\bquantity\x18\x02 \x01(\x01R\bquantity\"\xe2\x01\n" +
	"\x10SubscribeRequest\x12\x1a\n" +
	"\bexchange\x18\x01 \x01(\tR\bexchange\x12\x1f\n" +
	"\vmarket_type\x18\x02 \x01(\tR\n" +
	"marketType\x12\x16\n" +
	"\x06symbol\x18\x03 \x01(\tR\x06symbol\x12)\n" +
	"\tdata_type\x18\x04 \x01(\x0e2\f.pb.DataTypeR\bdataType\x12%\n" +
	"\x0ekline_interval\x18\x05 \x01(\tR\rklineInterval\x12'\n" +
	"\x0forderbook_depth\x18\x06 \x01(\x05R\x0eorderbookDepth\"]\n" +
	"\x11SubscribeResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x14\n" +
	"\x05topic\x18\x03 \x01(\tR\x05topic\"*\n" +
	"\x12UnsubscribeRequest\x12\x14\n" +
	"\x05topic\x18\x01 \x01(\tR\x05topic\"I\n" +
	"\x13UnsubscribeResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"q\n" +
	"\x13FetchMarketsRequest\x12\x1a\n" +
	"\bexchange\x18\x01 \x01(\tR\bexchange\x12\x1f\n" +
	"\vmarket_type\x18\x02 \x01(\tR\n" +
	"marketType\x12\x1d\n" +
	"\n" +
	"stack_type\x18\x03 \x01(\tR\tstackType\"<\n" +
	"\x14FetchMarketsResponse\x12$\n" +
	"\amarkets\x18\x01 \x03(\v2\n" +
	".pb.MarketR\amarkets\"i\n" +
	"\x12FetchTickerRequest\x12\x1a\n" +
	"\bexchange\x18\x01 \x01(\tR\bexchange\x12\x16\n" +
	"\x06symbol\x18\x02 \x01(\tR\x06symbol\x12\x1f\n" +
	"\vmarket_type\x18\x03 \x01(\tR\n" +
	"marketType\"9\n" +
	"\x13FetchTickerResponse\x12\"\n" +
	"\x06ticker\x18\x01 \x01(\v2\n" +
	".pb.TickerR\x06ticker\"j\n" +
	"\x13FetchTickersRequest\x12\x1a\n" +
	"\bexchange\x18\x01 \x01(\tR\bexchange\x12\x16\n" +
	"\x06symbol\x18\x02 \x01(\tR\x06symbol\x12\x1f\n" +
	"\vmarket_type\x18\x03 \x01(\tR\n" +
	"marketType\":\n" +
	"\x14FetchTickersResponse\x12\"\n" +
	"\x06ticker\x18\x01 \x01(\v2\n" +
	".pb.TickerR\x06ticker\"\xd5\x01\n" +
	"\x12FetchKlinesRequest\x12\x1a\n" +
	"\bexchange\x18\x01 \x01(\tR\bexchange\x12\x16\n" +
	"\x06symbol\x18\x02 \x01(\tR\x06symbol\x12\x1a\n" +
	"\binterval\x18\x03 \x01(\tR\binterval\x12\x1d\n" +
	"\n" +
	"start_time\x18\x04 \x01(\x03R\tstartTime\x12\x19\n" +
	"\bend_time\x18\x05 \x01(\x03R\aendTime\x12\x14\n" +
	"\x05limit\x18\x06 \x01(\x05R\x05limit\x12\x1f\n" +
	"\vmarket_type\x18\a \x01(\tR\n" +
	"marketType\"8\n" +
	"\x13FetchKlinesResponse\x12!\n" +
	"\x06klines\x18\x01 \x03(\v2\t.pb.KlineR\x06klines\"\x95\x01\n" +
	"\x12FetchTradesRequest\x12\x1a\n" +
	"\bexchange\x18\x01 \x01(\tR\bexchange\x12\x16\n" +
	"\x06symbol\x18\x02 \x01(\tR\x06symbol\x12\x14\n" +
	"\x05since\x18\x03 \x01(\x03R\x05since\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\x05R\x05limit\x12\x1f\n" +
	"\vmarket_type\x18\x05 \x01(\tR\n" +
	"marketType\"8\n" +
	"\x13FetchTradesResponse\x12!\n" +
	"\x06trades\x18\x01 \x03(\v2\t.pb.TradeR\x06trades\"\x82\x01\n" +
	"\x15FetchOrderBookRequest\x12\x1a\n" +
	"\bexchange\x18\x01 \x01(\tR\bexchange\x12\x16\n" +
	"\x06symbol\x18\x02 \x01(\tR\x06symbol\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\x12\x1f\n" +
	"\vmarket_type\x18\x04 \x01(\tR\n" +
	"marketType\"E\n" +
	"\x16FetchOrderBookResponse\x12+\n" +
	"\torderbook\x18\x01 \x01(\v2\r.pb.OrderBookR\torderbook\"o\n" +
	"\vPriceUpdate\x12\x14\n" +
	"\x05topic\x18\x01 \x01(\tR\x05topic\x12\x16\n" +
	"\x06symbol\x18\x02 \x01(\tR\x06symbol\x12\x14\n" +
	"\x05price\x18\x03 \x01(\x01R\x05price\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp\"D\n" +
	"\vKlineUpdate\x12\x14\n" +
	"\x05topic\x18\x01 \x01(\tR\x05topic\x12\x1f\n" +
	"\x05kline\x18\x02 \x01(\v2\t.pb.KlineR\x05kline\"D\n" +
	"\vTradeUpdate\x12\x14\n" +
	"\x05topic\x18\x01 \x01(\tR\x05topic\x12\x1f\n" +
	"\x05trade\x18\x02 \x01(\v2\t.pb.TradeR\x05trade\"T\n" +
	"\x0fOrderBookUpdate\x12\x14\n" +
	"\x05topic\x18\x01 \x01(\tR\x05topic\x12+\n" +
	"\torderbook\x18\x02 \x01(\v2\r.pb.OrderBookR\torderbook*E\n" +
	"\vMessageType\x12\v\n" +
	"\aREQUEST\x10\x00\x12\f\n" +
	"\bRESPONSE\x10\x01\x12\x10\n" +
	"\fNOTIFICATION\x10\x02\x12\t\n" +
	"\x05ERROR\x10\x03*\xfc\x01\n" +
	"\n" +
	"ActionType\x12\r\n" +
	"\tSUBSCRIBE\x10\x00\x12\x0f\n" +
	"\vUNSUBSCRIBE\x10\x01\x12\x11\n" +
	"\rFETCH_MARKETS\x10\n" +
	"\x12\x10\n" +
	"\fFETCH_TICKER\x10\v\x12\x11\n" +
	"\rFETCH_TICKERS\x10\f\x12\x10\n" +
	"\fFETCH_KLINES\x10\r\x12\x10\n" +
	"\fFETCH_TRADES\x10\x0e\x12\x13\n" +
	"\x0fFETCH_ORDERBOOK\x10\x0f\x12\x11\n" +
	"\rMARKET_UPDATE\x10\x14\x12\x10\n" +
	"\fPRICE_UPDATE\x10\x15\x12\x10\n" +
	"\fKLINE_UPDATE\x10\x16\x12\x10\n" +
	"\fTRADE_UPDATE\x10\x17\x12\x14\n" +
	"\x10ORDERBOOK_UPDATE\x10\x18*:\n" +
	"\bDataType\x12\t\n" +
	"\x05PRICE\x10\x00\x12\t\n" +
	"\x05KLINE\x10\x01\x12\t\n" +
	"\x05TRADE\x10\x02\x12\r\n" +
	"\tORDERBOOK\x10\x03B1Z/github.com/riven-blade/datahive/pkg/protocol/pbb\x06proto3"

var (
	file_pkg_protocol_pb_message_proto_rawDescOnce sync.Once
	file_pkg_protocol_pb_message_proto_rawDescData []byte
)

func file_pkg_protocol_pb_message_proto_rawDescGZIP() []byte {
	file_pkg_protocol_pb_message_proto_rawDescOnce.Do(func() {
		file_pkg_protocol_pb_message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_protocol_pb_message_proto_rawDesc), len(file_pkg_protocol_pb_message_proto_rawDesc)))
	})
	return file_pkg_protocol_pb_message_proto_rawDescData
}

var file_pkg_protocol_pb_message_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_pkg_protocol_pb_message_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_pkg_protocol_pb_message_proto_goTypes = []any{
	(MessageType)(0),               // 0: pb.MessageType
	(ActionType)(0),                // 1: pb.ActionType
	(DataType)(0),                  // 2: pb.DataType
	(*Message)(nil),                // 3: pb.Message
	(*Error)(nil),                  // 4: pb.Error
	(*Market)(nil),                 // 5: pb.Market
	(*MarketPrecision)(nil),        // 6: pb.MarketPrecision
	(*MarketLimits)(nil),           // 7: pb.MarketLimits
	(*LimitRange)(nil),             // 8: pb.LimitRange
	(*Ticker)(nil),                 // 9: pb.Ticker
	(*Kline)(nil),                  // 10: pb.Kline
	(*Trade)(nil),                  // 11: pb.Trade
	(*OrderBook)(nil),              // 12: pb.OrderBook
	(*PriceLevel)(nil),             // 13: pb.PriceLevel
	(*SubscribeRequest)(nil),       // 14: pb.SubscribeRequest
	(*SubscribeResponse)(nil),      // 15: pb.SubscribeResponse
	(*UnsubscribeRequest)(nil),     // 16: pb.UnsubscribeRequest
	(*UnsubscribeResponse)(nil),    // 17: pb.UnsubscribeResponse
	(*FetchMarketsRequest)(nil),    // 18: pb.FetchMarketsRequest
	(*FetchMarketsResponse)(nil),   // 19: pb.FetchMarketsResponse
	(*FetchTickerRequest)(nil),     // 20: pb.FetchTickerRequest
	(*FetchTickerResponse)(nil),    // 21: pb.FetchTickerResponse
	(*FetchTickersRequest)(nil),    // 22: pb.FetchTickersRequest
	(*FetchTickersResponse)(nil),   // 23: pb.FetchTickersResponse
	(*FetchKlinesRequest)(nil),     // 24: pb.FetchKlinesRequest
	(*FetchKlinesResponse)(nil),    // 25: pb.FetchKlinesResponse
	(*FetchTradesRequest)(nil),     // 26: pb.FetchTradesRequest
	(*FetchTradesResponse)(nil),    // 27: pb.FetchTradesResponse
	(*FetchOrderBookRequest)(nil),  // 28: pb.FetchOrderBookRequest
	(*FetchOrderBookResponse)(nil), // 29: pb.FetchOrderBookResponse
	(*PriceUpdate)(nil),            // 30: pb.PriceUpdate
	(*KlineUpdate)(nil),            // 31: pb.KlineUpdate
	(*TradeUpdate)(nil),            // 32: pb.TradeUpdate
	(*OrderBookUpdate)(nil),        // 33: pb.OrderBookUpdate
}
var file_pkg_protocol_pb_message_proto_depIdxs = []int32{
	1,  // 0: pb.Message.action:type_name -> pb.ActionType
	0,  // 1: pb.Message.type:type_name -> pb.MessageType
	6,  // 2: pb.Market.precision:type_name -> pb.MarketPrecision
	7,  // 3: pb.Market.limits:type_name -> pb.MarketLimits
	8,  // 4: pb.MarketLimits.leverage:type_name -> pb.LimitRange
	8,  // 5: pb.MarketLimits.amount:type_name -> pb.LimitRange
	8,  // 6: pb.MarketLimits.price:type_name -> pb.LimitRange
	8,  // 7: pb.MarketLimits.cost:type_name -> pb.LimitRange
	13, // 8: pb.OrderBook.bids:type_name -> pb.PriceLevel
	13, // 9: pb.OrderBook.asks:type_name -> pb.PriceLevel
	2,  // 10: pb.SubscribeRequest.data_type:type_name -> pb.DataType
	5,  // 11: pb.FetchMarketsResponse.markets:type_name -> pb.Market
	9,  // 12: pb.FetchTickerResponse.ticker:type_name -> pb.Ticker
	9,  // 13: pb.FetchTickersResponse.ticker:type_name -> pb.Ticker
	10, // 14: pb.FetchKlinesResponse.klines:type_name -> pb.Kline
	11, // 15: pb.FetchTradesResponse.trades:type_name -> pb.Trade
	12, // 16: pb.FetchOrderBookResponse.orderbook:type_name -> pb.OrderBook
	10, // 17: pb.KlineUpdate.kline:type_name -> pb.Kline
	11, // 18: pb.TradeUpdate.trade:type_name -> pb.Trade
	12, // 19: pb.OrderBookUpdate.orderbook:type_name -> pb.OrderBook
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_pkg_protocol_pb_message_proto_init() }
func file_pkg_protocol_pb_message_proto_init() {
	if File_pkg_protocol_pb_message_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_protocol_pb_message_proto_rawDesc), len(file_pkg_protocol_pb_message_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_protocol_pb_message_proto_goTypes,
		DependencyIndexes: file_pkg_protocol_pb_message_proto_depIdxs,
		EnumInfos:         file_pkg_protocol_pb_message_proto_enumTypes,
		MessageInfos:      file_pkg_protocol_pb_message_proto_msgTypes,
	}.Build()
	File_pkg_protocol_pb_message_proto = out.File
	file_pkg_protocol_pb_message_proto_goTypes = nil
	file_pkg_protocol_pb_message_proto_depIdxs = nil
}
